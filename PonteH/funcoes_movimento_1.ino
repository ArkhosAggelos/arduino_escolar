/*
  ============================================================
  Projeto: Controle de Rob√¥ 2WD com Ponte H
  Placa: Arduino UNO (ou compat√≠vel)
  Autor: Professor Claudio Roberto da Silva
  ============================================================

  üìå Descri√ß√£o:
  C√≥digo para movimentar um rob√¥ de chassi modelo 2WD
  utilizando uma Ponte H (L298N ou similar). O rob√¥
  possui dois motores DC independentes.

  üéØ Objetivo:
  Demonstrar o uso de fun√ß√µes para otimizar o c√≥digo e
  facilitar o controle de movimentos como "frente" e "tr√°s".
  Esse c√≥digo tamb√©m serve para testar se os motores est√£o
  girando no mesmo sentido.

  ‚ö† Observa√ß√£o Importante:
  - Se ao movimentar para frente o rob√¥ girar sobre o pr√≥prio eixo,
    significa que um motor est√° invertido. Basta inverter as conex√µes
    desse motor na Ponte H.
  - Para habilitar o movimento para tr√°s, remova as barras "//" de
    coment√°rio das linhas correspondentes no loop().

  üí° Dica:
  Ajuste as velocidades de cada motor separadamente para corrigir
  pequenas diferen√ßas e garantir que o rob√¥ siga em linha reta.
  
*/

// ================================
// Defini√ß√£o dos pinos conectados √† Ponte H
// Cada motor √© controlado por dois pinos (sentido frente e sentido r√©)
// Motor A -> IN1 e IN2
// Motor B -> IN3 e IN4
// ================================
#define IN1 10  // Motor A - sentido frente
#define IN2 9   // Motor A - sentido r√©
#define IN3 6   // Motor B - sentido frente
#define IN4 5   // Motor B - sentido r√©

// ================================
// Fun√ß√£o de configura√ß√£o
// ================================
void setup() {
  // Define todos os pinos como sa√≠da digital
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);

  // Garante que o rob√¥ inicie com os motores desligados
  pararMotores();
}

// ================================
// Fun√ß√£o principal - loop infinito
// ================================
void loop() {
  // Movimento para frente:
  // Motor A com velocidade 120 (de 0 a 255)
  // Motor B com velocidade 150 (de 0 a 255)
  // Dura√ß√£o: 2000 ms (2 segundos)
  frente(120, 150, 2000);

  // Para os motores por 200 ms
  pararMotores(200);
  
  // Movimento para tr√°s:
  // Motor A com velocidade 120 (de 0 a 255)
  // Motor B com velocidade 150 (de 0 a 255)
  // Dura√ß√£o: 2000 ms (2 segundos)
  // tras(130, 140, 2000);

  // Para os motores por 200 ms (comentado)
  // pararMotores(200);
}

// ================================
// ---- Fun√ß√µes de movimento ----
// ================================

// Movimento para FRENTE
// vel_IN1 -> velocidade do Motor A para frente (0 a 255)
// vel_IN3 -> velocidade do Motor B para frente (0 a 255)
// tempo   -> tempo do movimento em milissegundos
void frente(int vel_IN1, int vel_IN3, int tempo) {
  analogWrite(IN1, vel_IN1); // Motor A recebe PWM para frente
  digitalWrite(IN2, LOW);    // Motor A n√£o recebe sinal de r√©

  analogWrite(IN3, vel_IN3); // Motor B recebe PWM para frente
  digitalWrite(IN4, LOW);    // Motor B n√£o recebe sinal de r√©

  delay(tempo); // Aguarda o tempo definido antes de encerrar a fun√ß√£o
}

// Movimento para TR√ÅS
// vel_IN2 -> velocidade do Motor A para r√© (0 a 255)
// vel_IN4 -> velocidade do Motor B para r√© (0 a 255)
// tempo   -> tempo do movimento em milissegundos
void tras(int vel_IN2, int vel_IN4, int tempo) {
  digitalWrite(IN1, LOW);    // Motor A n√£o recebe sinal de frente
  analogWrite(IN2, vel_IN2); // Motor A recebe PWM para r√©

  digitalWrite(IN3, LOW);    // Motor B n√£o recebe sinal de frente
  analogWrite(IN4, vel_IN4); // Motor B recebe PWM para r√©
  
  delay(tempo); // Aguarda o tempo definido
}

// DESLIGA os motores
// tempo -> tempo de pausa com motores desligados
void pararMotores(int tempo) {
  analogWrite(IN1, 0); // Motor A frente desligado
  analogWrite(IN2, 0); // Motor A r√© desligado
  analogWrite(IN3, 0); // Motor B frente desligado
  analogWrite(IN4, 0); // Motor B r√© desligado
  
  delay(tempo); // Mant√©m a pausa com motores desligados
}
